{"ast":null,"code":"var _jsxFileName = \"/Users/Kartik/Desktop/my-app/src/ChessBoard.js\";\nimport React, { Component } from 'react';\nexport default class ChessBoard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      config: [// starting square, piece type, owner, id\n      [0, 'Rook', 'black', 'br1'], [1, 'Knight', 'black', 'bh1'], [2, 'Bishop', 'black', 'bb1'], [3, 'Queen', 'black', 'bq1'], [4, 'King', 'black', 'bh1'], [5, 'Bishop', 'black', 'bb2'], [6, 'Knight', 'black', 'bk2'], [7, 'Rook', 'black', 'br2'], [8, 'Pawn', 'black', 'bp1'], [9, 'Pawn', 'black', 'bp2'], [10, 'Pawn', 'black', 'bp3'], [11, 'Pawn', 'black', 'bp4'], [12, 'Pawn', 'black', 'bp5'], [13, 'Pawn', 'black', 'bp6'], [14, 'Pawn', 'black', 'bp7'], [15, 'Pawn', 'black', 'bp8'], [48, 'Pawn', 'white', 'wp1'], [49, 'Pawn', 'white', 'wp2'], [50, 'Pawn', 'white', 'wp3'], [51, 'Pawn', 'white', 'wp4'], [52, 'Pawn', 'white', 'wp5'], [53, 'Pawn', 'white', 'wp6'], [54, 'Pawn', 'white', 'wp7'], [55, 'Pawn', 'white', 'wp8'], [56, 'Rook', 'white', 'wr1'], [57, 'Knight', 'white', 'wh1'], [58, 'Bishop', 'white', 'wb1'], [59, 'Queen', 'white', 'wq1'], [60, 'King', 'white', 'wk1'], [61, 'Bishop', 'white', 'wb2'], [62, 'Knight', 'white', 'wh2'], [63, 'Rook', 'white', 'wr2']]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      config: this.state.config,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pieces: {},\n      squares: [],\n      rows: [],\n      cols: [],\n      currentPlayer: 'white',\n      moveInProgress: false,\n      movingPiece: null,\n      validMoves: null,\n      notices: {}\n    };\n    this.handleMove = this.handleMove.bind(this);\n    this.handleCommand = this.handleCommand.bind(this);\n    this.deletePiece = this.deletePiece.bind(this);\n  }\n\n  componentWillMount() {\n    this.initBoard();\n  }\n\n  componentDidMount() {\n    this.initPieces();\n  }\n\n  initBoard() {\n    const squares = [];\n    const rows = [];\n    const cols = [];\n    const colNames = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']; // pre-populate rows & cols with blank arrays\n\n    for (let i = 0; i < 8; i++) {\n      rows[i] = [];\n      cols[i] = [];\n    } // fill board with squares\n\n\n    for (let counter = 0, i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let square = {\n          index: counter,\n          chessId: String(colNames[j] + (8 - i)),\n          row: i,\n          col: j,\n          piece: null\n        };\n        squares[counter] = square;\n        rows[i][j] = square;\n        cols[j][i] = square;\n        counter++;\n      }\n    }\n\n    this.setState({\n      rows: rows\n    });\n    this.setState({\n      cols: cols\n    });\n    this.setState({\n      squares: squares\n    }, this.setAdjacents);\n  }\n\n  setAdjacents() {\n    const {\n      squares,\n      rows,\n      cols\n    } = this.state;\n    squares.forEach(square => {\n      square.topLeft = rows[square.row - 1] && cols[square.col - 1] ? rows[square.row - 1][square.col - 1] : null;\n      square.topRight = rows[square.row - 1] && cols[square.col + 1] ? rows[square.row - 1][square.col + 1] : null;\n      square.bottomLeft = rows[square.row + 1] && cols[square.col - 1] ? rows[square.row + 1][square.col - 1] : null;\n      square.bottomRight = rows[square.row + 1] && cols[square.col + 1] ? rows[square.row + 1][square.col + 1] : null;\n    });\n    this.setState({\n      squares: squares\n    });\n  }\n\n  initPieces() {\n    const {\n      squares,\n      pieces\n    } = this.state;\n    this.props.config.forEach(item => {\n      let piece = {\n        location: item[0],\n        type: item[1],\n        owner: item[2],\n        id: item[3]\n      };\n      squares[item[0]].piece = piece;\n      pieces[piece.id] = piece;\n    });\n    this.setState({\n      pieces: pieces\n    });\n    this.setState({\n      squares: squares\n    });\n  }\n\n  switchPlayer() {\n    let currentPlayer = this.state.currentPlayer;\n    currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n    this.setState({\n      currentPlayer: currentPlayer\n    });\n  }\n\n  handleMove(index) {\n    const {\n      squares,\n      rows,\n      cols,\n      moveInProgress,\n      validMoves\n    } = this.state;\n    const target = squares[index]; // if moveInProgress === true, treat click as setting destination for moving piece\n\n    if (moveInProgress) {\n      if (!validMoves.includes(target.index)) {\n        return this.cancelMove(NOTICE_TYPE.invalidMove);\n      } else {\n        return this.completeMove(target.index);\n      }\n    } // if !moveInProgress, treat click as initiating move\n    else {\n        if (!target.piece) return; // if no piece is present, do nothing\n\n        if (target.piece.owner !== currentPlayer) return this.cancelMove(NOTICE_TYPE.wrongPlayer);\n        let validMoves = this.refs[target.index].refs.piece.determineValidMoves(target, squares, rows, cols, currentPlayer);\n\n        if (!validMoves.length) {\n          return this.cancelMove(NOTICE_TYPE.noMovesAvailable); // no valid moves were found...\n        } else {\n          this.setState({\n            moveInProgress: true\n          });\n          this.setState({\n            movingPiece: target.piece\n          });\n          this.setState({\n            validMoves: validMoves\n          });\n        }\n      }\n  }\n\n  completeMove(index, movingPiece = this.state.movingPiece) {\n    const {\n      squares,\n      pieces,\n      currentPlayer\n    } = this.state; // remove piece from old location\n\n    let source = squares[movingPiece.location];\n    source.piece = null; // access new location and remove eliminated enemy piece, if needed\n\n    let destination = squares[index];\n\n    if (destination.piece) {\n      delete pieces[destination.piece.id];\n      this.setState({\n        pieces: pieces\n      });\n    } // add moving piece to new location\n\n\n    destination.piece = movingPiece;\n    destination.piece.location = destination.index;\n    this.setState({\n      squares: React.addons.update(squares, {\n        [source.index]: {\n          $set: source\n        }\n      })\n    });\n    this.setState({\n      squares: React.addons.update(squares, {\n        [destination.index]: {\n          $set: destination\n        }\n      })\n    });\n    this.setState({\n      moveInProgress: false\n    });\n    this.setState({\n      movingPiece: null\n    });\n    this.setState({\n      validMoves: null\n    });\n    this.switchPlayer();\n  }\n\n  cancelMove(notice) {\n    this.setState({\n      moveInProgress: false\n    });\n    this.setState({\n      movingPiece: null\n    });\n    this.setState({\n      validMoves: null\n    });\n    let {\n      notices\n    } = this.state;\n    notices = React.addons.update(this.state.notices, {\n      [notice]: {\n        $set: true\n      }\n    });\n    this.setState({\n      notices: notices\n    }, () => {\n      setTimeout(() => {\n        notices = React.addons.update(this.state.notices, {\n          [notice]: {\n            $set: false\n          }\n        });\n        this.setState({\n          notices: notices\n        });\n      }, 1000);\n    });\n  }\n\n  handleCommand(command) {\n    const {\n      pieces,\n      squares,\n      rows,\n      cols,\n      currentPlayer\n    } = this.state; // example command: WP1A3\n\n    if (command.length !== 5) return this.cancelMove(NOTICE_TYPE.invalidCommand); // parse command\n\n    command = command.toLowerCase(); // assuming no invalid chars, spot for future check\n\n    let pieceId = command.substr(0, 3);\n    let chessId = command.substr(3); // derive and validate needed info\n\n    let piece = pieces[pieceId];\n    if (!pieces[pieceId] || piece.owner !== currentPlayer) return this.cancelMove(NOTICE_TYPE.invalidCommand);\n    let source = squares[piece.location];\n    let destination = squares.find(square => {\n      return square.chessId === chessId;\n    });\n    if (!destination) return this.cancelMove(NOTICE_TYPE.invalidCommand); // get valid moves\n\n    let validMoves = this.refs[source.index].refs.piece.determineValidMoves(source, squares, rows, cols, currentPlayer);\n\n    if (!validMoves.includes(destination.index)) {\n      return this.cancelMove(NOTICE_TYPE.invalidMove);\n    } else {\n      this.completeMove(destination.index, piece);\n    }\n  }\n\n  deletePiece(pieceId, index) {\n    // pieces are referenced in two places so need to delete both\n    delete this.state.pieces[pieceId];\n    delete this.state.squares[index].piece;\n    this.setState({\n      pieces: this.state.pieces\n    });\n    this.setState({\n      squares: this.state.squares\n    });\n  }\n\n  render() {\n    let squares = this.state.squares.map((square, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        ref: index,\n        key: index,\n        index: index,\n        chessId: square.chessId,\n        piece: square.piece,\n        handleMove: this.handleMove,\n        deletePiece: this.deletePiece,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      });\n    }); // Process squares into rows of length 8\n    // Doing it this way rather than rendering state.rows directly allows for squares to be indexed properly\n\n    let rows = [];\n    let chunk = 8;\n\n    for (let i = 0; i < squares.length; i += chunk) {\n      rows.push(squares.slice(i, i + chunk));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }, `Current Player: ${this.state.currentPlayer.charAt(0).toUpperCase()}${this.state.currentPlayer.substr(1)}`), /*#__PURE__*/React.createElement(\"main\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, rows.map((row, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 24\n        }\n      }, row);\n    }), /*#__PURE__*/React.createElement(Notice, {\n      notices: this.state.notices,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Commands, {\n      handleCommand: this.handleCommand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(PieceList, {\n      pieces: this.state.pieces,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDelete: false\n    };\n    this.startDelete = this.startDelete.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.cancelDelete = this.cancelDelete.bind(this);\n  }\n\n  startDelete(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      showDelete: true\n    });\n  }\n\n  handleDelete(e) {\n    e.preventDefault();\n    this.props.deletePiece(this.props.piece.id, this.props.index);\n    this.setState({\n      showDelete: false\n    });\n  }\n\n  cancelDelete(e) {\n    e.stopPropagation();\n    this.setState({\n      showDelete: false\n    });\n  }\n\n  render() {\n    let {\n      piece,\n      index,\n      chessId,\n      handleMove\n    } = this.props;\n    piece = piece ? React.createElement(ChessPieces[piece.type], {\n      ref: 'piece',\n      type: piece.type,\n      owner: piece.owner\n    }) : '';\n    let form = this.state.showDelete && piece ? /*#__PURE__*/React.createElement(\"form\", {\n      className: \"delete-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }\n    }, \"Delete Piece?\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 15\n      }\n    }, \"Yes\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.cancelDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 15\n      }\n    }, \"No\"))) : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"square\",\n      onClick: handleMove.bind(this, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"square-meta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"chess-id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 13\n      }\n    }, chessId), piece ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"delete-label\",\n      onClick: this.startDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 24\n      }\n    }) : ''), piece, form);\n  }\n\n}\n\nclass Notice extends Component {\n  render() {\n    const {\n      notices\n    } = this.props;\n    var notice = '';\n\n    if (notices.invalidMove && notices.invalidMove === true) {\n      notice = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"notice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 18\n        }\n      }, \"Invalid Move\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 54\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 59\n        }\n      }, \"Try a different destination\"));\n    } else if (notices.noMovesAvailable && notices.noMovesAvailable === true) {\n      notice = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"notice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 18\n        }\n      }, \"No Moves Available\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 60\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 65\n        }\n      }, \"Use a different piece\"));\n    } else if (notices.invalidCommand && notices.invalidCommand === true) {\n      notice = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"notice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 18\n        }\n      }, \"Command Not Valid\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 59\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 64\n        }\n      }, \"Something is off with your command\"));\n    } else if (notices.wrongPlayer && notices.wrongPlayer === true) {\n      notice = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"notice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 18\n        }\n      }, \"Not Your Piece\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 56\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 61\n        }\n      }, \"Try moving your own piece instead :)\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `notices ${!notice ? 'isHidden' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, notice);\n  }\n\n}\n\nclass Commands extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.handleCommand(this.state.value);\n    this.setState({\n      value: ''\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"command-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }, \"To Make a Move:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }\n    }, \"Click on the desired piece and then click on the destination tile.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }\n    }, \"Alternatively, you can enter a chess notation command below.\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, \"Enter Command\")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }\n    }, \"Example Command: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 31\n      }\n    }, \"'wh1c3'\"), \" moves White's Horse #1 (Knight) to tile C3\"));\n  }\n\n}\n\nclass PieceList extends Component {\n  render() {\n    // TODO: Reconsider this for future optimization - could cache values so that pieceLists are not\n    // fully re-rendered each time this.props.pieces changes\n    let whitePieces = {};\n    let blackPieces = {};\n    Object.keys(this.props.pieces).forEach(key => {\n      let piece = this.props.pieces[key];\n\n      if (piece.owner === 'white') {\n        if (whitePieces[piece.type]) {\n          whitePieces[piece.type]++;\n        } else {\n          whitePieces[piece.type] = 1;\n        }\n      } else {\n        if (blackPieces[piece.type]) {\n          blackPieces[piece.type]++;\n        } else {\n          blackPieces[piece.type] = 1;\n        }\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece-lists\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"piece-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }, \"White Pieces\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 13\n      }\n    }, Object.keys(whitePieces).sort().map((key, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"item\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 19\n        }\n      }, key), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 19\n        }\n      }, whitePieces[key]));\n    }))), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"piece-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }\n    }, \"Black Pieces\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 13\n      }\n    }, Object.keys(blackPieces).sort().map((key, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"item\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 19\n        }\n      }, key), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 19\n        }\n      }, blackPieces[key]));\n    }))));\n  }\n\n}\n\nclass ChessPiece extends Component {\n  moveDiagonal(start, diagonal, direction, currentPlayer) {\n    let validMoves = [];\n    recurse(diagonal, direction);\n    return validMoves;\n\n    function recurse(diagonal, direction) {\n      if (diagonal === null || diagonal === start) return; // base case\n\n      if (diagonal.piece) {\n        if (diagonal.piece.owner !== currentPlayer) {\n          validMoves.push(diagonal.index);\n          return;\n        } else {\n          return;\n        }\n      } else {\n        validMoves.push(diagonal.index);\n        recurse(diagonal[direction], direction);\n      }\n    }\n  }\n\n  moveHorizontalAndVertical(start, rows, cols, currentPlayer) {\n    let validMoves = []; // make horizontal slices and reverse first so arrays \"radiate\" out from start position\n\n    let slice1 = rows[start.row].slice(0, start.col).reverse();\n    let slice2 = rows[start.row].slice(start.col + 1); // make vertical slices and reverse first so arrays \"radiate\" out from start position\n\n    let slice3 = cols[start.col].slice(0, start.row).reverse();\n    let slice4 = cols[start.col].slice(start.row + 1);\n    processSlice(slice1);\n    processSlice(slice2);\n    processSlice(slice3);\n    processSlice(slice4);\n    return validMoves;\n\n    function processSlice(slice) {\n      for (let i = 0; i < slice.length; i++) {\n        if (slice[i].piece) {\n          if (slice[i].piece.owner !== currentPlayer) {\n            validMoves.push(slice[i].index);\n            break;\n          } else {\n            break;\n          }\n        } else {\n          validMoves.push(slice[i].index);\n        }\n      }\n    }\n  }\n\n}\n\nconst King = class King extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    // TODO: implement logic for check/checkmate\n    let validMoves = [];\n    if (start.topLeft) addMove(start.topLeft);\n    if (start.topRight) addMove(start.topRight);\n    if (start.bottomLeft) addMove(start.bottomLeft);\n    if (start.topRight) addMove(start.topRight);\n    if (squares[start - 1]) addMove(squares[start - 1]);\n    if (squares[start + 1]) addMove(squares[start + 1]);\n    if (squares[start - 8]) addMove(squares[start - 8]);\n    if (squares[start + 8]) addMove(squares[start + 8]);\n    return validMoves;\n\n    function addMove(target) {\n      if (target.piece) {\n        if (target.piece.owner !== currentPlayer) {\n          validMoves.push(target.index);\n          return;\n        } else {\n          return;\n        }\n      } else {\n        validMoves.push(target.index);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9812) : String.fromCharCode(9818));\n  }\n\n};\nconst Queen = class Queen extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    // recursively check diagonals\n    let topLeft = this.moveDiagonal(start, start.topLeft, 'topLeft', currentPlayer);\n    let topRight = this.moveDiagonal(start, start.topRight, 'topRight', currentPlayer);\n    let bottomLeft = this.moveDiagonal(start, start.bottomLeft, 'bottomLeft', currentPlayer);\n    let bottomRight = this.moveDiagonal(start, start.bottomRight, 'bottomRight', currentPlayer);\n    let validMoves = this.moveHorizontalAndVertical(start, rows, cols, currentPlayer);\n    validMoves = validMoves.concat(topLeft, topRight, bottomLeft, bottomRight);\n    return validMoves;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9813) : String.fromCharCode(9819));\n  }\n\n};\nconst Bishop = class Bishop extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    // recursively check diagonals\n    let topLeft = this.moveDiagonal(start, start.topLeft, 'topLeft', currentPlayer);\n    let topRight = this.moveDiagonal(start, start.topRight, 'topRight', currentPlayer);\n    let bottomLeft = this.moveDiagonal(start, start.bottomLeft, 'bottomLeft', currentPlayer);\n    let bottomRight = this.moveDiagonal(start, start.bottomRight, 'bottomRight', currentPlayer);\n    let validMoves = Array.prototype.concat(topLeft, topRight, bottomLeft, bottomRight);\n    return validMoves;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9815) : String.fromCharCode(9821));\n  }\n\n};\nconst Knight = class Knight extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    let validMoves = [];\n    let possibleMoves = [];\n\n    if (rows[start.row + 1]) {\n      possibleMoves.push(rows[start.row + 1][start.col + 2]);\n      possibleMoves.push(rows[start.row + 1][start.col - 2]);\n    }\n\n    if (rows[start.row - 1]) {\n      possibleMoves.push(rows[start.row - 1][start.col + 2]);\n      possibleMoves.push(rows[start.row - 1][start.col - 2]);\n    }\n\n    if (rows[start.row + 2]) {\n      possibleMoves.push(rows[start.row + 2][start.col + 1]);\n      possibleMoves.push(rows[start.row + 2][start.col - 1]);\n    }\n\n    if (rows[start.row - 2]) {\n      possibleMoves.push(rows[start.row - 2][start.col + 1]);\n      possibleMoves.push(rows[start.row - 2][start.col - 1]);\n    }\n\n    for (let move of possibleMoves) {\n      if (move) addMove(move);\n    }\n\n    function addMove(target) {\n      if (target.piece) {\n        if (target.piece.owner !== currentPlayer) {\n          validMoves.push(target.index);\n          return;\n        } else {\n          return;\n        }\n      } else {\n        validMoves.push(target.index);\n      }\n    }\n\n    return validMoves;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9816) : String.fromCharCode(9822));\n  }\n\n};\nconst Rook = class Rook extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    let validMoves = this.moveHorizontalAndVertical(start, rows, cols, currentPlayer);\n    return validMoves;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9814) : String.fromCharCode(9820));\n  }\n\n};\nconst Pawn = class Pawn extends ChessPiece {\n  determineValidMoves(start, squares, rows, cols, currentPlayer) {\n    let validMoves = []; // checking for currentPlayer accounts for pawns not allowed to move backwards\n\n    if (currentPlayer === 'white') {\n      // add vertical move\n      if (squares[start.index - 8] && !squares[start.index - 8].piece) {\n        validMoves.push(start.index - 8);\n      } // add diagonal attack moves\n\n\n      if (start.topLeft && start.topLeft.piece && start.topLeft.piece.owner !== currentPlayer) {\n        validMoves.push(start.topLeft.index);\n      } else if (start.topRight && start.topRight.piece && start.topRight.piece.owner !== currentPlayer) {\n        validMoves.push(start.topRight.index);\n      }\n    } else {\n      if (squares[start.index + 8] && !squares[start.index + 8].piece) {\n        validMoves.push(start.index + 8);\n      } // add diagonal attack moves\n\n\n      if (start.bottomLeft && start.bottomLeft.piece && start.bottomLeft.piece.owner !== currentPlayer) {\n        validMoves.push(start.bottomLeft.index);\n      } else if (start.bottomRight && start.bottomRight.piece && start.bottomRight.piece.owner !== currentPlayer) {\n        validMoves.push(start.bottomRight.index);\n      }\n    }\n\n    return validMoves;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 9\n      }\n    }, this.props.owner === 'white' ? String.fromCharCode(9817) : String.fromCharCode(9823));\n  }\n\n};\nlet ChessPieces = {\n  King,\n  Queen,\n  Bishop,\n  Knight,\n  Rook,\n  Pawn\n};\nconst NOTICE_TYPE = {\n  noMovesAvailable: 'noMovesAvailable',\n  invalidMove: 'invalidMove',\n  invalidCommand: 'invalidCommand',\n  wrongPlayer: 'wrongPlayer'\n};","map":{"version":3,"sources":["/Users/Kartik/Desktop/my-app/src/ChessBoard.js"],"names":["React","Component","ChessBoard","constructor","state","config","render","Board","props","pieces","squares","rows","cols","currentPlayer","moveInProgress","movingPiece","validMoves","notices","handleMove","bind","handleCommand","deletePiece","componentWillMount","initBoard","componentDidMount","initPieces","colNames","i","counter","j","square","index","chessId","String","row","col","piece","setState","setAdjacents","forEach","topLeft","topRight","bottomLeft","bottomRight","item","location","type","owner","id","switchPlayer","target","includes","cancelMove","NOTICE_TYPE","invalidMove","completeMove","wrongPlayer","refs","determineValidMoves","length","noMovesAvailable","source","destination","addons","update","$set","notice","setTimeout","command","invalidCommand","toLowerCase","pieceId","substr","find","map","chunk","push","slice","charAt","toUpperCase","Square","showDelete","startDelete","handleDelete","cancelDelete","e","preventDefault","stopPropagation","createElement","ChessPieces","ref","form","Notice","Commands","value","handleChange","handleSubmit","PieceList","whitePieces","blackPieces","Object","keys","key","sort","ChessPiece","moveDiagonal","start","diagonal","direction","recurse","moveHorizontalAndVertical","slice1","reverse","slice2","slice3","slice4","processSlice","King","addMove","fromCharCode","Queen","concat","Bishop","Array","prototype","Knight","possibleMoves","move","Rook","Pawn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ChessBoard extends Component {\n    constructor() {\n      super();\n      this.state = {\n        config: [\n          // starting square, piece type, owner, id\n          [0, 'Rook', 'black', 'br1'],\n          [1, 'Knight', 'black', 'bh1'],\n          [2, 'Bishop', 'black', 'bb1'],\n          [3, 'Queen', 'black', 'bq1'],\n          [4, 'King', 'black', 'bh1'],\n          [5, 'Bishop', 'black', 'bb2'],\n          [6, 'Knight', 'black', 'bk2'],\n          [7, 'Rook', 'black', 'br2'],\n          [8, 'Pawn', 'black', 'bp1'],\n          [9, 'Pawn', 'black', 'bp2'],\n          [10, 'Pawn', 'black', 'bp3'],\n          [11, 'Pawn', 'black', 'bp4'],\n          [12, 'Pawn', 'black', 'bp5'],\n          [13, 'Pawn', 'black', 'bp6'],\n          [14, 'Pawn', 'black', 'bp7'],\n          [15, 'Pawn', 'black', 'bp8'],\n          [48, 'Pawn', 'white', 'wp1'],\n          [49, 'Pawn', 'white', 'wp2'],\n          [50, 'Pawn', 'white', 'wp3'],\n          [51, 'Pawn', 'white', 'wp4'],\n          [52, 'Pawn', 'white', 'wp5'],\n          [53, 'Pawn', 'white', 'wp6'],\n          [54, 'Pawn', 'white', 'wp7'],\n          [55, 'Pawn', 'white', 'wp8'],\n          [56, 'Rook', 'white', 'wr1'],\n          [57, 'Knight', 'white', 'wh1'],\n          [58, 'Bishop', 'white', 'wb1'],\n          [59, 'Queen', 'white', 'wq1'],\n          [60, 'King', 'white', 'wk1'],\n          [61, 'Bishop', 'white', 'wb2'],\n          [62, 'Knight', 'white', 'wh2'],\n          [63, 'Rook', 'white', 'wr2'],\n        ]\n      }\n    }\n    render() {\n      return (\n        <div>\n          <Board config={this.state.config}/>\n        </div>\n      );\n    }\n  }\n  \n  class Board extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        pieces: {},\n        squares: [],\n        rows: [],\n        cols: [],\n        currentPlayer: 'white',\n        moveInProgress: false,\n        movingPiece: null,\n        validMoves: null,\n        notices: {}\n      }\n      this.handleMove = this.handleMove.bind(this);\n      this.handleCommand = this.handleCommand.bind(this);\n      this.deletePiece = this.deletePiece.bind(this);\n    }\n    componentWillMount() {\n      this.initBoard();\n    }\n    componentDidMount() {\n      this.initPieces();\n    }\n    initBoard() {\n      const squares = [];\n      const rows = [];\n      const cols = [];\n      const colNames = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  \n      // pre-populate rows & cols with blank arrays\n      for (let i = 0; i < 8; i++) {\n        rows[i] = [];\n        cols[i] = [];\n      }\n  \n      // fill board with squares\n      for (let counter = 0, i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          let square = {\n            index: counter,\n            chessId: String(colNames[j] + (8 - i)),\n            row: i,\n            col: j,\n            piece: null\n          }\n          squares[counter] = square;\n          rows[i][j] = square;\n          cols[j][i] = square;\n          counter++;\n        }\n      }\n  \n      this.setState({rows: rows});\n      this.setState({cols: cols});\n      this.setState({squares: squares}, this.setAdjacents);\n    }\n    setAdjacents() {\n      const {squares, rows, cols} = this.state;\n  \n      squares.forEach ((square) => {\n        square.topLeft = (rows[square.row - 1] && cols[square.col - 1]) ? rows[square.row - 1][square.col - 1] : null;\n        square.topRight = (rows[square.row - 1] && cols[square.col + 1]) ? rows[square.row - 1][square.col + 1] : null;\n        square.bottomLeft = (rows[square.row + 1] && cols[square.col - 1]) ? rows[square.row + 1][square.col - 1] : null;\n        square.bottomRight = (rows[square.row + 1] && cols[square.col + 1]) ? rows[square.row + 1][square.col + 1] : null;\n      });\n  \n      this.setState({squares: squares});\n    }\n    initPieces() {\n      const {squares, pieces} = this.state;\n  \n      this.props.config.forEach((item) => {\n        let piece = {\n          location: item[0],\n          type: item[1],\n          owner: item[2],\n          id: item[3]\n        }\n  \n        squares[item[0]].piece = piece;\n        pieces[piece.id] = piece;\n      });\n  \n      this.setState({pieces: pieces});\n      this.setState({squares: squares});\n    }\n    switchPlayer() {\n      let currentPlayer = this.state.currentPlayer;\n      currentPlayer = (currentPlayer === 'white') ? 'black' : 'white';\n      this.setState({currentPlayer: currentPlayer});\n    }\n    handleMove(index) {\n      const {squares, rows, cols, moveInProgress, validMoves} = this.state;\n      const target = squares[index];\n  \n      // if moveInProgress === true, treat click as setting destination for moving piece\n      if (moveInProgress) {\n        if (!validMoves.includes(target.index)) {\n          return this.cancelMove(NOTICE_TYPE.invalidMove);\n        }\n        else {\n          return this.completeMove(target.index);\n        }\n      }\n      // if !moveInProgress, treat click as initiating move\n      else {\n        if (!target.piece) return; // if no piece is present, do nothing\n        if (target.piece.owner !== currentPlayer) return this.cancelMove(NOTICE_TYPE.wrongPlayer);\n  \n        let validMoves = this.refs[target.index].refs.piece.determineValidMoves(target, squares, rows, cols, currentPlayer);\n  \n        if (!validMoves.length) {\n          return this.cancelMove(NOTICE_TYPE.noMovesAvailable); // no valid moves were found...\n        }\n        else {\n          this.setState({moveInProgress: true});\n          this.setState({movingPiece: target.piece});\n          this.setState({validMoves: validMoves});\n        }\n      }\n    }\n    completeMove(index, movingPiece = this.state.movingPiece) {\n      const {squares, pieces, currentPlayer} = this.state;\n  \n      // remove piece from old location\n      let source = squares[movingPiece.location];\n      source.piece = null;\n  \n      // access new location and remove eliminated enemy piece, if needed\n      let destination = squares[index];\n      if (destination.piece) {\n        delete pieces[destination.piece.id];\n        this.setState({pieces: pieces});\n      }\n  \n      // add moving piece to new location\n      destination.piece = movingPiece;\n      destination.piece.location = destination.index;\n  \n      this.setState({squares: React.addons.update(squares, {[source.index]: {$set: source}})});\n      this.setState({squares: React.addons.update(squares, {[destination.index]: {$set: destination}})});\n      this.setState({moveInProgress: false});\n      this.setState({movingPiece: null});\n      this.setState({validMoves: null});\n      this.switchPlayer();\n    }\n    cancelMove(notice) {\n      this.setState({moveInProgress: false});\n      this.setState({movingPiece: null});\n      this.setState({validMoves: null});\n  \n      let {notices} = this.state;\n      notices = React.addons.update(this.state.notices, {[notice]: {$set: true}});\n      this.setState({notices: notices}, () => {\n        setTimeout(() => {\n          notices = React.addons.update(this.state.notices, {[notice]: {$set: false}});\n          this.setState({notices: notices});\n        }, 1000);\n      });\n    }\n    handleCommand(command) {\n      const {pieces, squares, rows, cols, currentPlayer} = this.state;\n      // example command: WP1A3\n      if (command.length !== 5) return this.cancelMove(NOTICE_TYPE.invalidCommand);\n  \n      // parse command\n      command = command.toLowerCase(); // assuming no invalid chars, spot for future check\n      let pieceId = command.substr(0, 3);\n      let chessId = command.substr(3);\n  \n      // derive and validate needed info\n      let piece = pieces[pieceId];\n      if (!pieces[pieceId] || piece.owner !== currentPlayer) return this.cancelMove(NOTICE_TYPE.invalidCommand);\n  \n      let source = squares[piece.location];\n      let destination = squares.find((square) => {\n        return square.chessId === chessId;\n      });\n      if (!destination) return this.cancelMove(NOTICE_TYPE.invalidCommand);\n  \n      // get valid moves\n      let validMoves = this.refs[source.index].refs.piece.determineValidMoves(source, squares, rows, cols, currentPlayer);\n  \n      if (!validMoves.includes(destination.index)) {\n        return this.cancelMove(NOTICE_TYPE.invalidMove);\n      }\n      else {\n        this.completeMove(destination.index, piece);\n      }\n    }\n    deletePiece(pieceId, index) {\n      // pieces are referenced in two places so need to delete both\n      delete this.state.pieces[pieceId];\n      delete this.state.squares[index].piece;\n      this.setState({pieces: this.state.pieces});\n      this.setState({squares: this.state.squares});\n    }\n    render() {\n      let squares = this.state.squares.map((square, index) => {\n        return (\n          <Square\n            ref={index}\n            key={index}\n            index={index}\n            chessId={square.chessId}\n            piece={square.piece}\n            handleMove={this.handleMove}\n            deletePiece={this.deletePiece}\n          />\n        );\n      });\n  \n      // Process squares into rows of length 8\n      // Doing it this way rather than rendering state.rows directly allows for squares to be indexed properly\n      let rows = [];\n      let chunk = 8;\n      for (let i = 0; i < squares.length; i += chunk) {\n        rows.push(squares.slice(i, i + chunk));\n      }\n  \n      return (\n        <div className=\"wrapper\">\n          <h1>\n            {`Current Player: ${this.state.currentPlayer.charAt(0).toUpperCase()}${this.state.currentPlayer.substr(1)}`}\n          </h1>\n          <main className=\"main\">\n            <div className=\"board\">\n              {rows.map((row, index) => {\n                return <div className=\"row\" key={index}>{row}</div>\n              })}\n              <Notice notices={this.state.notices}/>\n            </div>\n            <div className=\"sidebar\">\n              <Commands handleCommand={this.handleCommand}/>\n              <PieceList pieces={this.state.pieces}/>\n            </div>\n          </main>\n        </div>\n      );\n    }\n  }\n  \n  class Square extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        showDelete: false\n      }\n      this.startDelete = this.startDelete.bind(this);\n      this.handleDelete = this.handleDelete.bind(this);\n      this.cancelDelete = this.cancelDelete.bind(this);\n    }\n    startDelete(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setState({showDelete: true});\n    }\n    handleDelete(e) {\n      e.preventDefault();\n      this.props.deletePiece(this.props.piece.id, this.props.index);\n      this.setState({showDelete: false});\n    }\n    cancelDelete(e) {\n      e.stopPropagation();\n      this.setState({showDelete: false});\n    }\n    render() {\n      let {piece, index, chessId, handleMove} = this.props;\n  \n      piece = (piece) ? React.createElement(ChessPieces[piece.type], {ref: 'piece', type: piece.type, owner: piece.owner}) : '';\n  \n      let form = (this.state.showDelete && piece)\n        ? <form className=\"delete-form\">\n            <p>Delete Piece?</p>\n            <div>\n              <button type=\"button\" onClick={this.handleDelete}>Yes</button>\n              <button type=\"button\" onClick={this.cancelDelete}>No</button>\n            </div>\n          </form>\n        : '';\n  \n      return (\n        <div className=\"square\" onClick={handleMove.bind(this, index)}>\n          <div className=\"square-meta\">\n            <span className=\"chess-id\">{chessId}</span>\n            {(piece) ? <span className=\"delete-label\" onClick={this.startDelete}></span> : ''}\n          </div>\n          {piece}\n          {form}\n        </div>\n      );\n    }\n  }\n  \n  class Notice extends Component {\n    render() {\n      const {notices} = this.props;\n      var notice = '';\n      if (notices.invalidMove && notices.invalidMove === true) {\n        notice = <div className=\"notice\">Invalid Move<br/><span>Try a different destination</span></div>;\n      }\n      else if (notices.noMovesAvailable && notices.noMovesAvailable === true) {\n        notice = <div className=\"notice\">No Moves Available<br/><span>Use a different piece</span></div>;\n      }\n      else if (notices.invalidCommand && notices.invalidCommand === true) {\n        notice = <div className=\"notice\">Command Not Valid<br/><span>Something is off with your command</span></div>;\n      }\n      else if (notices.wrongPlayer && notices.wrongPlayer === true) {\n        notice = <div className=\"notice\">Not Your Piece<br/><span>Try moving your own piece instead :)</span></div>;\n      }\n  \n      return (\n        <div className={`notices ${(!notice) ? 'isHidden' : ''}`}>{notice}</div>\n      );\n    }\n  }\n  \n  class Commands extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: ''\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(e) {\n      this.setState({value: e.target.value});\n    }\n    handleSubmit(e) {\n      e.preventDefault();\n      this.props.handleCommand(this.state.value);\n      this.setState({value: ''});\n    }\n    render() {\n      return (\n        <div className=\"command-form\">\n        <h3>To Make a Move:</h3>\n        <p>Click on the desired piece and then click on the destination tile.</p>\n        <p>Alternatively, you can enter a chess notation command below.</p>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n            <button type=\"submit\">Enter Command</button>\n          </form>\n          <p>Example Command: <b>'wh1c3'</b> moves White's Horse #1 (Knight) to tile C3</p>\n        </div>\n      );\n    }\n  }\n  \n  class PieceList extends Component {\n    render() {\n      // TODO: Reconsider this for future optimization - could cache values so that pieceLists are not\n      // fully re-rendered each time this.props.pieces changes\n      let whitePieces = {};\n      let blackPieces = {};\n  \n      Object.keys(this.props.pieces).forEach((key) => {\n        let piece = this.props.pieces[key];\n        if (piece.owner === 'white') {\n          if (whitePieces[piece.type]) {\n            whitePieces[piece.type]++;\n          }\n          else {\n            whitePieces[piece.type] = 1;\n          }\n        }\n        else {\n          if (blackPieces[piece.type]) {\n            blackPieces[piece.type]++;\n          }\n          else {\n            blackPieces[piece.type] = 1;\n          }\n        }\n      });\n  \n      return (\n        <div className=\"piece-lists\">\n          <table className=\"piece-list\">\n            <thead>\n              <tr>\n                <th colSpan=\"2\">White Pieces</th>\n              </tr>\n            </thead>\n            <tbody>\n            {Object.keys(whitePieces).sort().map((key, index) => {\n              return (\n                <tr className=\"item\" key={index}>\n                  <td>{key}</td>\n                  <td>{whitePieces[key]}</td>\n                </tr>\n              );\n            })}\n            </tbody>\n          </table>\n  \n          <table className=\"piece-list\">\n            <thead>\n              <tr>\n                <th colSpan=\"2\">Black Pieces</th>\n              </tr>\n            </thead>\n            <tbody>\n            {Object.keys(blackPieces).sort().map((key, index) => {\n              return (\n                <tr className=\"item\" key={index}>\n                  <td>{key}</td>\n                  <td>{blackPieces[key]}</td>\n                </tr>\n              );\n            })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n  \n  class ChessPiece extends Component {\n    moveDiagonal(start, diagonal, direction, currentPlayer) {\n      let validMoves = [];\n      recurse(diagonal, direction);\n  \n      return validMoves;\n  \n      function recurse(diagonal, direction) {\n        if (diagonal === null || diagonal === start) return; // base case\n  \n        if (diagonal.piece) {\n          if (diagonal.piece.owner !== currentPlayer) {\n            validMoves.push(diagonal.index);\n            return;\n          }\n          else {\n            return;\n          }\n        }\n        else {\n          validMoves.push(diagonal.index);\n          recurse(diagonal[direction], direction);\n        }\n      }\n    }\n    moveHorizontalAndVertical(start, rows, cols, currentPlayer) {\n      let validMoves = [];\n  \n      // make horizontal slices and reverse first so arrays \"radiate\" out from start position\n      let slice1 = rows[start.row].slice(0, start.col).reverse();\n      let slice2 = rows[start.row].slice(start.col + 1);\n  \n      // make vertical slices and reverse first so arrays \"radiate\" out from start position\n      let slice3 = cols[start.col].slice(0, start.row).reverse();\n      let slice4 = cols[start.col].slice(start.row + 1);\n  \n      processSlice(slice1);\n      processSlice(slice2);\n      processSlice(slice3);\n      processSlice(slice4);\n  \n      return validMoves;\n  \n      function processSlice(slice) {\n        for (let i = 0; i < slice.length; i++) {\n          if (slice[i].piece) {\n            if (slice[i].piece.owner !== currentPlayer) {\n              validMoves.push(slice[i].index);\n              break;\n            }\n            else {\n              break;\n            }\n          }\n          else {\n            validMoves.push(slice[i].index);\n          }\n        }\n      }\n    }\n  }\n  \n  const King = class King extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n      // TODO: implement logic for check/checkmate\n  \n      let validMoves = [];\n  \n      if (start.topLeft) addMove(start.topLeft);\n      if (start.topRight) addMove(start.topRight);\n      if (start.bottomLeft) addMove(start.bottomLeft);\n      if (start.topRight) addMove(start.topRight);\n      if (squares[start - 1]) addMove(squares[start - 1]);\n      if (squares[start + 1]) addMove(squares[start + 1]);\n      if (squares[start - 8]) addMove(squares[start - 8]);\n      if (squares[start + 8]) addMove(squares[start + 8]);\n  \n      return validMoves;\n  \n      function addMove(target) {\n        if (target.piece) {\n          if (target.piece.owner !== currentPlayer) {\n            validMoves.push(target.index);\n            return;\n          }\n          else {\n            return;\n          }\n        }\n        else {\n          validMoves.push(target.index);\n        }\n      }\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9812) : String.fromCharCode(9818) }\n        </div>\n      );\n    }\n  }\n  \n  const Queen = class Queen extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n      // recursively check diagonals\n      let topLeft = this.moveDiagonal(start, start.topLeft, 'topLeft', currentPlayer);\n      let topRight = this.moveDiagonal(start, start.topRight, 'topRight', currentPlayer);\n      let bottomLeft = this.moveDiagonal(start, start.bottomLeft, 'bottomLeft', currentPlayer);\n      let bottomRight = this.moveDiagonal(start, start.bottomRight, 'bottomRight', currentPlayer);\n  \n      let validMoves = this.moveHorizontalAndVertical(start, rows, cols, currentPlayer);\n  \n      validMoves = validMoves.concat(topLeft, topRight, bottomLeft, bottomRight);\n      return validMoves;\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9813) : String.fromCharCode(9819) }\n        </div>\n      );\n    }\n  }\n  \n  const Bishop = class Bishop extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n      // recursively check diagonals\n      let topLeft = this.moveDiagonal(start, start.topLeft, 'topLeft', currentPlayer);\n      let topRight = this.moveDiagonal(start, start.topRight, 'topRight', currentPlayer);\n      let bottomLeft = this.moveDiagonal(start, start.bottomLeft, 'bottomLeft', currentPlayer);\n      let bottomRight = this.moveDiagonal(start, start.bottomRight, 'bottomRight', currentPlayer);\n  \n      let validMoves = Array.prototype.concat(topLeft, topRight, bottomLeft, bottomRight);\n      return validMoves;\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9815) : String.fromCharCode(9821) }\n        </div>\n      );\n    }\n  }\n  \n  const Knight = class Knight extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n      let validMoves = [];\n      let possibleMoves = [];\n  \n      if (rows[start.row + 1]) {\n        possibleMoves.push(rows[start.row + 1][start.col + 2]);\n        possibleMoves.push(rows[start.row + 1][start.col - 2]);\n      }\n      if (rows[start.row - 1]) {\n        possibleMoves.push(rows[start.row - 1][start.col + 2]);\n        possibleMoves.push(rows[start.row - 1][start.col - 2]);\n      }\n      if (rows[start.row + 2]) {\n        possibleMoves.push(rows[start.row + 2][start.col + 1]);\n        possibleMoves.push(rows[start.row + 2][start.col - 1]);\n      }\n      if (rows[start.row - 2]) {\n        possibleMoves.push(rows[start.row - 2][start.col + 1]);\n        possibleMoves.push(rows[start.row - 2][start.col - 1]);\n      }\n  \n      for (let move of possibleMoves) {\n        if (move) addMove(move);\n      }\n  \n      function addMove(target) {\n        if (target.piece) {\n          if (target.piece.owner !== currentPlayer) {\n            validMoves.push(target.index);\n            return;\n          }\n          else {\n            return;\n          }\n        }\n        else {\n          validMoves.push(target.index);\n        }\n      }\n  \n      return validMoves;\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9816) : String.fromCharCode(9822) }\n        </div>\n      );\n    }\n  }\n  \n  const Rook = class Rook extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n      let validMoves = this.moveHorizontalAndVertical(start, rows, cols, currentPlayer);\n      return validMoves;\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9814) : String.fromCharCode(9820) }\n        </div>\n      );\n    }\n  }\n  \n  const Pawn = class Pawn extends ChessPiece {\n    determineValidMoves(start, squares, rows, cols, currentPlayer) {\n  \n      let validMoves = [];\n      // checking for currentPlayer accounts for pawns not allowed to move backwards\n      if (currentPlayer === 'white') {\n        // add vertical move\n        if (squares[start.index - 8] && !squares[start.index - 8].piece) {\n          validMoves.push(start.index - 8);\n        }\n  \n        // add diagonal attack moves\n        if (start.topLeft && start.topLeft.piece && start.topLeft.piece.owner !== currentPlayer) {\n          validMoves.push(start.topLeft.index);\n        }\n        else if (start.topRight && start.topRight.piece && start.topRight.piece.owner !== currentPlayer) {\n          validMoves.push(start.topRight.index);\n        }\n      }\n      else {\n        if (squares[start.index + 8] && !squares[start.index + 8].piece) {\n          validMoves.push(start.index + 8);\n        }\n  \n        // add diagonal attack moves\n        if (start.bottomLeft && start.bottomLeft.piece && start.bottomLeft.piece.owner !== currentPlayer) {\n          validMoves.push(start.bottomLeft.index);\n        }\n        else if (start.bottomRight && start.bottomRight.piece && start.bottomRight.piece.owner !== currentPlayer) {\n          validMoves.push(start.bottomRight.index);\n        }\n      }\n  \n      return validMoves;\n    }\n    render() {\n      return (\n        <div className=\"piece\">\n          {(this.props.owner === 'white') ? String.fromCharCode(9817) : String.fromCharCode(9823) }\n        </div>\n      );\n    }\n  }\n  \n  let ChessPieces = {\n    King, Queen, Bishop, Knight, Rook, Pawn\n  };\n  \n  const NOTICE_TYPE = {\n    noMovesAvailable: 'noMovesAvailable',\n    invalidMove: 'invalidMove',\n    invalidCommand: 'invalidCommand',\n    wrongPlayer: 'wrongPlayer'\n  };\n  "]},"metadata":{},"sourceType":"module"}